apply plugin: 'groovy'

dependencies {
	compile localGroovy()
	compile project(':trainbenchmark-generator')
	compile project(':trainbenchmark-generator-emf')
	compile project(':trainbenchmark-generator-graph-neo4j')
	compile project(':trainbenchmark-generator-graph-tinkerpop')
	compile project(':trainbenchmark-generator-rdf')
	compile project(':trainbenchmark-generator-sql')
	compile project(':trainbenchmark-tool')
	compile project(':trainbenchmark-tool-emfapi')
	compile project(':trainbenchmark-tool-jena')
	compile project(':trainbenchmark-tool-mysql')
	compile project(':trainbenchmark-tool-neo4j')
	compile project(':trainbenchmark-tool-sqlite')
	compile project(':trainbenchmark-tool-tinkergraph')
	compile project(':trainbenchmark-tool-viatra')
    compile project(':trainbenchmark-tool-epsilon-evl-emf')
	compile project(':trainbenchmark-tool-epsilon-ievl-emf')
}

sourceSets {
	main {
		groovy { srcDirs = ['src']}
	}
}

/**
 * Initialize the generator, benchmark, etc. scripts in src directory,
 * based on the template script in the src-template directory.
 */
task initScripts(type: Copy) {
	from 'src-template'
	into 'src'
	include '*.groovy'
}

/**
 * Save the current scripts from the src directory to the src-template directory.
 * Use with caution and double check the diffs before committing the changes.
 */
task saveScripts(type: Copy) {
	from 'src'
	into 'src-template'
	include '*.groovy'
}

task cleanResults(type: Delete) {
	doFirst {
		def resultDir = "../results"
		file(resultDir).eachDir { dir ->
			delete "${dir}"
		}
	}
}

// Craete a MANIFEST.MF file with classpath to avoid windows max size limits
task pathingJar(type: Jar) {
	dependsOn configurations.runtime
	appendix = 'pathing'

	doFirst {
		manifest {
			attributes "Class-Path": configurations.runtime.files.collect {
				it.toURL().toString().replaceFirst(/file:\/+/, '/')
			}.join(' ')
		}
	}
}

task benchmark(dependsOn: 'classes', type: JavaExec) {
    dependsOn pathingJar
    main = 'BenchmarkScript'
    doFirst {
        classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
    }
}

task generate(dependsOn: 'classes', type: JavaExec) {
	dependsOn pathingJar
    main = 'GeneratorScript'
    doFirst {
		classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
	}
}

task individualBenchmark(dependsOn: 'classes', type: JavaExec) {
    dependsOn pathingJar
	main = 'IndividualBenchmarkScript'
    doFirst {
        classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
    }
}

generate.dependsOn(":trainbenchmark-generator-emf:shadowJar")
generate.dependsOn(":trainbenchmark-generator-rdf:shadowJar")
generate.dependsOn(":trainbenchmark-generator-graph-neo4j:shadowJar")
generate.dependsOn(":trainbenchmark-generator-graph-tinkerpop:shadowJar")
generate.dependsOn(":trainbenchmark-generator-sql:shadowJar")

benchmark.dependsOn(':trainbenchmark-tool-emfapi:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-jena:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-mysql:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-neo4j:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-sqlite:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-tinkergraph:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-viatra:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-epsilon-evl-emf:shadowJar')
benchmark.dependsOn(':trainbenchmark-tool-epsilon-ievl-emf:shadowJar')

individualBenchmark.dependsOn(':trainbenchmark-tool-emfapi:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-jena:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-mysql:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-neo4j:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-sqlite:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-tinkergraph:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-viatra:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-epsilon-evl-emf:shadowJar')
individualBenchmark.dependsOn(':trainbenchmark-tool-epsilon-ievl-emf:shadowJar')