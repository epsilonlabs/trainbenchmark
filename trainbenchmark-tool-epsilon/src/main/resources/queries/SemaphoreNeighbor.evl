context Route {
	/**
	 * SemaphoreNeighbor requires routes which
	 * are connected through a pair of sensors and a pair of
	 * track elements to belong to the same semaphore. The
	 * corresponding query checks for the absence of circles,
	 * so the efficiency of join and antijoin [76] operations is
	 * tested. One-way navigable references are also present in
	 * the constraint, so the efficiency of their evaluation is also
	 * measured. Subsumption inference is required, as the two
	 * track elements (te1, te2) can be switches or segments.
	 */
	constraint SemaphoreNeighbor {
		
		check {
			var otherRoutes = Route.all.excluding(self);
			for (sensor1 in self.requires) {
				for (te1 in sensor1.monitors) {
					for (te2 in te1.connectsTo) {
						for (sensor2 in te2.monitoredBy) {
							var route2 = otherRoutes.selectOne(route2 |
									route2.requires.includes(sensor2) and route2.entry <> self.exit
									);
							if (route2.isDefined()) {
								self.~match = new Native("RouteSensorMatch")(self.exit, self, route2, sensor1, sensor2, te1, te2);
								return false;
							}
						}
					}
				}
			}
			return true;
		}
	}
}