group 'hu.bme.mit.trainbenchmark'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    jmh
}

dependencies {
    jmhCompile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.21'
    jmhCompile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.19'
    jmhCompile project(':trainbenchmark-tool-epsilon-evl-emf')
}

//task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
//    classpath = sourceSets.jmh.runtimeClasspath
//    main = 'org.openjdk.jmh.Main'
//}

// FIXME add -s so test happen in order


task ('jmhHelp', description:'Print help for the jmh task') {
    doLast {
        println ""
        println "Usage of jmh tasks:"
        println ""

        println "Only execute specific benchmark(s):"
        println "\t./gradlew jmh -Pinclude=\".*MyBenchmark.*\""

        println ""
        println "Specify extra profilers:"
        println "\t./gradlew jmh -Pprofilers=\"gc,stack\""

        println ""
        println "Prominent profilers (for full list call jmhProfilers task):"
        println "\tcomp - JitCompilations, tune your iterations"
        println "\tstack - which methods used most time"
        println "\tgc - print garbage collection stats"
        println "\ths_thr - thread usage"

        println ""
        println "Change report format from JSON to one of [CSV, JSON, NONE, SCSV, TEXT]:"
        println "\t./gradlew jmh -Pformat=csv"

        println ""
        println "Specify JVM arguments:"
        println "\t./gradlew jmh -PjvmArgs=\"-Dtest.cluster=local\""

        println ""
        println "Run in verification mode (execute benchmarks with minimum of fork/warmup-/benchmark-iterations):"
        println "\tgw jmh -Pverify"

        println ""
        println "Resources:"
        println "\thttp://tutorials.jenkov.com/java-performance/jmh.html (Introduction)"
        println "\thttp://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ (Samples)"
    }
}

task jmhProfilers(type: JavaExec, description:'Lists the available profilers for the jmh task', group: 'Development') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'
    args '-lprof'
}

task jmhCliHelp(type: JavaExec, description:'Lists the available profilers for the jmh task', group: 'Development') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'
    args '-h'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '')
    def exclude = project.properties.get('exclude')
    def format = project.properties.get('format', 'json')
    def profilers = project.properties.get('profilers')
    def jvmArgs = project.properties.get('jvmArgs')
    def verify =  project.properties.get('verify')

    def resultFile = file("build/reports/jmh/result.${format}")

    args include
    if(exclude) {
        args '-e', exclude
    }
//    if(verify != null) { // execute benchmarks with the minimum amount of execution (only to check if they are working)
//        println "≥≥ Running in verify mode"
//        args '-f' , 1
//        args '-wi' , 1
//        args '-i' , 1
//    }
    args '-foe', 'true'     //fail-on-error
    args '-v', 'NORMAL'     //verbosity [SILENT, NORMAL, EXTRA]
    args '-to', '5m'   // timeout
    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx4000m'     // Max memory
    args '-jvmArgsPrepend', '-Xms2000m'     // Initial memory
    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
    }
}